var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var CameraPreviewOriginal = /** @class */ (function (_super) {
    __extends(CameraPreviewOriginal, _super);
    function CameraPreviewOriginal() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.FOCUS_MODE = {
            FIXED: 'fixed',
            AUTO: 'auto',
            CONTINUOUS: 'continuous',
            CONTINUOUS_PICTURE: 'continuous-picture',
            CONTINUOUS_VIDEO: 'continuous-video',
            EDOF: 'edof',
            INFINITY: 'infinity',
            MACRO: 'macro' // Android Only
        };
        _this.EXPOSURE_MODE = {
            LOCK: 'lock',
            AUTO: 'auto',
            CONTINUOUS: 'continuous',
            CUSTOM: 'custom'
        };
        _this.FLASH_MODE = {
            OFF: 'off',
            ON: 'on',
            AUTO: 'auto',
            RED_EYE: 'red-eye',
            TORCH: 'torch' // Android Only
        };
        _this.COLOR_EFFECT = {
            AQUA: 'aqua',
            BLACKBOARD: 'blackboard',
            MONO: 'mono',
            NEGATIVE: 'negative',
            NONE: 'none',
            POSTERIZE: 'posterize',
            SEPIA: 'sepia',
            SOLARIZE: 'solarize',
            WHITEBOARD: 'whiteboard' // Android Only
        };
        _this.CAMERA_DIRECTION = {
            BACK: 'back',
            FRONT: 'front'
        };
        return _this;
    }
    CameraPreviewOriginal.prototype.startCamera = function (options) { return cordova(this, "startCamera", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    CameraPreviewOriginal.prototype.stopCamera = function () { return cordova(this, "stopCamera", {}, arguments); };
    CameraPreviewOriginal.prototype.switchCamera = function () { return cordova(this, "switchCamera", {}, arguments); };
    CameraPreviewOriginal.prototype.hide = function () { return cordova(this, "hide", {}, arguments); };
    CameraPreviewOriginal.prototype.show = function () { return cordova(this, "show", {}, arguments); };
    CameraPreview.prototype.startRecording = function () { return cordova(this, "startRecording", {}, arguments); };
    CameraPreview.prototype.stopRecording = function () { return cordova(this, "stopRecording", {}, arguments); };
    CameraPreviewOriginal.prototype.takePicture = function (options) { return cordova(this, "takePicture", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    CameraPreviewOriginal.prototype.takeSnapshot = function (options) { return cordova(this, "takeSnapshot", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    CameraPreviewOriginal.prototype.setColorEffect = function (effect) { return cordova(this, "setColorEffect", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    CameraPreviewOriginal.prototype.setZoom = function (zoom) { return cordova(this, "setZoom", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    CameraPreviewOriginal.prototype.getMaxZoom = function () { return cordova(this, "getMaxZoom", {}, arguments); };
    CameraPreviewOriginal.prototype.getZoom = function () { return cordova(this, "getZoom", {}, arguments); };
    CameraPreviewOriginal.prototype.setPreviewSize = function (dimensions) { return cordova(this, "setPreviewSize", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    CameraPreviewOriginal.prototype.getFocusMode = function () { return cordova(this, "getFocusMode", {}, arguments); };
    CameraPreviewOriginal.prototype.setFocusMode = function (focusMode) { return cordova(this, "setFocusMode", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    CameraPreviewOriginal.prototype.getSupportedFocusModes = function () { return cordova(this, "getSupportedFocusModes", {}, arguments); };
    CameraPreviewOriginal.prototype.getFlashMode = function () { return cordova(this, "getFlashMode", {}, arguments); };
    CameraPreviewOriginal.prototype.setFlashMode = function (flashMode) { return cordova(this, "setFlashMode", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    CameraPreviewOriginal.prototype.getSupportedFlashModes = function () { return cordova(this, "getSupportedFlashModes", {}, arguments); };
    CameraPreviewOriginal.prototype.getSupportedPictureSizes = function () { return cordova(this, "getSupportedPictureSizes", {}, arguments); };
    CameraPreviewOriginal.prototype.getExposureMode = function () { return cordova(this, "getExposureMode", {}, arguments); };
    CameraPreviewOriginal.prototype.getExposureModes = function () { return cordova(this, "getExposureModes", {}, arguments); };
    CameraPreviewOriginal.prototype.setExposureMode = function (lock) { return cordova(this, "setExposureMode", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    CameraPreviewOriginal.prototype.getExposureCompensation = function () { return cordova(this, "getExposureCompensation", {}, arguments); };
    CameraPreviewOriginal.prototype.setExposureCompensation = function (exposureCompensation) { return cordova(this, "setExposureCompensation", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    CameraPreviewOriginal.prototype.getExposureCompensationRange = function () { return cordova(this, "getExposureCompensationRange", {}, arguments); };
    CameraPreviewOriginal.prototype.tapToFocus = function (xPoint, yPoint) { return cordova(this, "tapToFocus", {}, arguments); };
    CameraPreviewOriginal.prototype.onBackButton = function () { return cordova(this, "onBackButton", {}, arguments); };
    CameraPreviewOriginal.prototype.getHorizontalFOV = function () { return cordova(this, "getHorizontalFOV", {}, arguments); };
    CameraPreviewOriginal.pluginName = "CameraPreview";
    CameraPreviewOriginal.plugin = "cordova-plugin-camera-preview";
    CameraPreviewOriginal.pluginRef = "CameraPreview";
    CameraPreviewOriginal.repo = "https://github.com/cordova-plugin-camera-preview/cordova-plugin-camera-preview";
    CameraPreviewOriginal.platforms = ["Android", "iOS"];
    return CameraPreviewOriginal;
}(IonicNativePlugin));
var CameraPreview = new CameraPreviewOriginal();
export { CameraPreview };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2NhbWVyYS1wcmV2aWV3L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFDQSxPQUFPLDhCQUFzQyxNQUFNLG9CQUFvQixDQUFDOztJQW9KckMsaUNBQWlCOzs7UUFDbEQsZ0JBQVUsR0FBRztZQUNYLEtBQUssRUFBRSxPQUFPO1lBQ2QsSUFBSSxFQUFFLE1BQU07WUFDWixVQUFVLEVBQUUsWUFBWTtZQUN4QixrQkFBa0IsRUFBRSxvQkFBb0I7WUFDeEMsZ0JBQWdCLEVBQUUsa0JBQWtCO1lBQ3BDLElBQUksRUFBRSxNQUFNO1lBQ1osUUFBUSxFQUFFLFVBQVU7WUFDcEIsS0FBSyxFQUFFLE9BQU8sQ0FBQyxlQUFlO1NBQy9CLENBQUM7UUFFRixtQkFBYSxHQUFHO1lBQ2QsSUFBSSxFQUFFLE1BQU07WUFDWixJQUFJLEVBQUUsTUFBTTtZQUNaLFVBQVUsRUFBRSxZQUFZO1lBQ3hCLE1BQU0sRUFBRSxRQUFRO1NBQ2pCLENBQUM7UUFFRixnQkFBVSxHQUFHO1lBQ1gsR0FBRyxFQUFFLEtBQUs7WUFDVixFQUFFLEVBQUUsSUFBSTtZQUNSLElBQUksRUFBRSxNQUFNO1lBQ1osT0FBTyxFQUFFLFNBQVM7WUFDbEIsS0FBSyxFQUFFLE9BQU8sQ0FBQyxlQUFlO1NBQy9CLENBQUM7UUFFRixrQkFBWSxHQUFHO1lBQ2IsSUFBSSxFQUFFLE1BQU07WUFDWixVQUFVLEVBQUUsWUFBWTtZQUN4QixJQUFJLEVBQUUsTUFBTTtZQUNaLFFBQVEsRUFBRSxVQUFVO1lBQ3BCLElBQUksRUFBRSxNQUFNO1lBQ1osU0FBUyxFQUFFLFdBQVc7WUFDdEIsS0FBSyxFQUFFLE9BQU87WUFDZCxRQUFRLEVBQUUsVUFBVTtZQUNwQixVQUFVLEVBQUUsWUFBWSxDQUFDLGVBQWU7U0FDekMsQ0FBQztRQUVGLHNCQUFnQixHQUFHO1lBQ2pCLElBQUksRUFBRSxNQUFNO1lBQ1osS0FBSyxFQUFFLE9BQU87U0FDZixDQUFDOzs7SUFXRixtQ0FBVyxhQUFDLE9BQTZCO0lBU3pDLGtDQUFVO0lBU1Ysb0NBQVk7SUFTWiw0QkFBSTtJQVNKLDRCQUFJO0lBYUosbUNBQVcsYUFBQyxPQUFxQztJQWNqRCxvQ0FBWSxhQUFDLE9BQXFDO0lBZWxELHNDQUFjLGFBQUMsTUFBYztJQWE3QiwrQkFBTyxhQUFDLElBQWE7SUFTckIsa0NBQVU7SUFTViwrQkFBTztJQWFQLHNDQUFjLGFBQUMsVUFBb0M7SUFTbkQsb0NBQVk7SUFhWixvQ0FBWSxhQUFDLFNBQWtCO0lBUy9CLDhDQUFzQjtJQVN0QixvQ0FBWTtJQWFaLG9DQUFZLGFBQUMsU0FBa0I7SUFTL0IsOENBQXNCO0lBU3RCLGdEQUF3QjtJQVN4Qix1Q0FBZTtJQVNmLHdDQUFnQjtJQWFoQix1Q0FBZSxhQUFDLElBQWE7SUFTN0IsK0NBQXVCO0lBYXZCLCtDQUF1QixhQUFDLG9CQUE2QjtJQVNyRCxvREFBNEI7SUFXNUIsa0NBQVUsYUFBQyxNQUFjLEVBQUUsTUFBYztJQVN6QyxvQ0FBWTtJQVNaLHdDQUFnQjs7Ozs7O3dCQXRlbEI7RUFxSm1DLGlCQUFpQjtTQUF2QyxhQUFhIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29yZG92YSwgSW9uaWNOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2FtZXJhUHJldmlld0RpbWVuc2lvbnMge1xuICAvKiogVGhlIHdpZHRoIG9mIHRoZSBjYW1lcmEgcHJldmlldywgZGVmYXVsdCB0byB3aW5kb3cuc2NyZWVuLndpZHRoICovXG4gIHdpZHRoPzogbnVtYmVyO1xuXG4gIC8qKiBUaGUgaGVpZ2h0IG9mIHRoZSBjYW1lcmEgcHJldmlldywgZGVmYXVsdCB0byB3aW5kb3cuc2NyZWVuLmhlaWdodCAqL1xuICBoZWlnaHQ/OiBudW1iZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2FtZXJhUHJldmlld09wdGlvbnMge1xuICAvKiogVGhlIGxlZnQgZWRnZSBpbiBwaXhlbHMsIGRlZmF1bHQgMCAqL1xuICB4PzogbnVtYmVyO1xuXG4gIC8qKiBUaGUgdG9wIGVkZ2UgaW4gcGl4ZWxzLCBkZWZhdWx0IDAgKi9cbiAgeT86IG51bWJlcjtcblxuICAvKiogVGhlIHdpZHRoIGluIHBpeGVscywgZGVmYXVsdCB3aW5kb3cuc2NyZWVuLndpZHRoICovXG4gIHdpZHRoPzogbnVtYmVyO1xuXG4gIC8qKiBUaGUgaGVpZ2h0IGluIHBpeGVscywgZGVmYXVsdCB3aW5kb3cuc2NyZWVuLmhlaWdodCAqL1xuICBoZWlnaHQ/OiBudW1iZXI7XG5cbiAgLyoqIENob29zZSB0aGUgY2FtZXJhIHRvIHVzZSAnZnJvbnQnIG9yICdyZWFyJywgZGVmYXVsdCAnZnJvbnQnICovXG4gIGNhbWVyYT86IHN0cmluZztcblxuICAvKiogVGFwIHRvIHRha2UgYSBwaG90bywgZGVmYXVsdCB0cnVlIChwaWN0dXJlIHF1YWxpdHkgYnkgZGVmYXVsdCA6IDg1KSAqL1xuICB0YXBQaG90bz86IGJvb2xlYW47XG5cbiAgLyoqIFByZXZpZXcgYm94IGRyYWcgYWNyb3NzIHRoZSBzY3JlZW4sIGRlZmF1bHQgJ2ZhbHNlJyAqL1xuICBwcmV2aWV3RHJhZz86IGJvb2xlYW47XG5cbiAgLyoqIFByZXZpZXcgYm94IHRvIHRoZSBiYWNrIG9mIHRoZSB3ZWJ2aWV3ICh0cnVlID0+IGJhY2ssIGZhbHNlID0+IGZyb250KSAsIGRlZmF1bHQgZmFsc2UgKi9cbiAgdG9CYWNrPzogYm9vbGVhbjtcblxuICAvKiogQWxwaGEgY2hhbm5lbCBvZiB0aGUgcHJldmlldyBib3gsIGZsb2F0LCBbMCwxXSwgZGVmYXVsdCAxICovXG4gIGFscGhhPzogbnVtYmVyO1xuXG4gIC8qKiBUYXAgdG8gc2V0IHNwZWNpZmljIGZvY3VzIHBvaW50LiBOb3RlLCB0aGlzIGFzc3VtZXMgdGhlIGNhbWVyYSBpcyBmdWxsLXNjcmVlbi4gZGVmYXVsdCBmYWxzZSAqL1xuICB0YXBUb0ZvY3VzPzogYm9vbGVhbjtcblxuICAvKiogT24gQW5kcm9pZCBkaXNhYmxlIGF1dG9tYXRpYyByb3RhdGlvbiBvZiB0aGUgaW1hZ2UgYW5kIHN0cmlwcGluZyBvZiBFeGl0IGhlYWRlci4gZGVmYXVsdCBmYWxzZSAqL1xuICBkaXNhYmxlRXhpZkhlYWRlclN0cmlwcGluZz86IGJvb2xlYW47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2FtZXJhUHJldmlld1BpY3R1cmVPcHRpb25zIHtcbiAgLyoqIFRoZSB3aWR0aCBpbiBwaXhlbHMsIGRlZmF1bHQgMCAqL1xuICB3aWR0aD86IG51bWJlcjtcbiAgLyoqIFRoZSBoZWlnaHQgaW4gcGl4ZWxzLCBkZWZhdWx0IDAgKi9cbiAgaGVpZ2h0PzogbnVtYmVyO1xuICAvKiogVGhlIHBpY3R1cmUgcXVhbGl0eSwgMCAtIDEwMCwgZGVmYXVsdCA4NSAqL1xuICBxdWFsaXR5PzogbnVtYmVyO1xufVxuXG4vKipcbiAqIEBiZXRhXG4gKiBAbmFtZSBDYW1lcmEgUHJldmlld1xuICogQGRlc2NyaXB0aW9uXG4gKiBTaG93aW5nIGNhbWVyYSBwcmV2aWV3IGluIEhUTUxcbiAqXG4gKiBSZXF1aXJlcyBDb3Jkb3ZhIHBsdWdpbjogYGh0dHBzOi8vZ2l0aHViLmNvbS9jb3Jkb3ZhLXBsdWdpbi1jYW1lcmEtcHJldmlldy9jb3Jkb3ZhLXBsdWdpbi1jYW1lcmEtcHJldmlldy5naXRgLiBGb3IgbW9yZSBpbmZvLCBwbGVhc2Ugc2VlIHRoZSBbQ29yZG92YSBDYW1lcmEgUHJldmlldyBkb2NzXShodHRwczovL2dpdGh1Yi5jb20vY29yZG92YS1wbHVnaW4tY2FtZXJhLXByZXZpZXcvY29yZG92YS1wbHVnaW4tY2FtZXJhLXByZXZpZXcpLlxuICpcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgQ2FtZXJhUHJldmlldywgQ2FtZXJhUHJldmlld1BpY3R1cmVPcHRpb25zLCBDYW1lcmFQcmV2aWV3T3B0aW9ucywgQ2FtZXJhUHJldmlld0RpbWVuc2lvbnMgfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NhbWVyYS1wcmV2aWV3L25neCc7XG4gKlxuICogY29uc3RydWN0b3IocHJpdmF0ZSBjYW1lcmFQcmV2aWV3OiBDYW1lcmFQcmV2aWV3KSB7IH1cbiAqXG4gKiAuLi5cbiAqXG4gKiAvLyBjYW1lcmEgb3B0aW9ucyAoU2l6ZSBhbmQgbG9jYXRpb24pLiBJbiB0aGUgZm9sbG93aW5nIGV4YW1wbGUsIHRoZSBwcmV2aWV3IHVzZXMgdGhlIHJlYXIgY2FtZXJhIGFuZCBkaXNwbGF5IHRoZSBwcmV2aWV3IGluIHRoZSBiYWNrIG9mIHRoZSB3ZWJ2aWV3XG4gKiBjb25zdCBjYW1lcmFQcmV2aWV3T3B0czogQ2FtZXJhUHJldmlld09wdGlvbnMgPSB7XG4gKiAgIHg6IDAsXG4gKiAgIHk6IDAsXG4gKiAgIHdpZHRoOiB3aW5kb3cuc2NyZWVuLndpZHRoLFxuICogICBoZWlnaHQ6IHdpbmRvdy5zY3JlZW4uaGVpZ2h0LFxuICogICBjYW1lcmE6ICdyZWFyJyxcbiAqICAgdGFwUGhvdG86IHRydWUsXG4gKiAgIHByZXZpZXdEcmFnOiB0cnVlLFxuICogICB0b0JhY2s6IHRydWUsXG4gKiAgIGFscGhhOiAxXG4gKiB9XG4gKlxuICogLy8gc3RhcnQgY2FtZXJhXG4gKiB0aGlzLmNhbWVyYVByZXZpZXcuc3RhcnRDYW1lcmEoY2FtZXJhUHJldmlld09wdHMpLnRoZW4oXG4gKiAgIChyZXMpID0+IHtcbiAqICAgICBjb25zb2xlLmxvZyhyZXMpXG4gKiAgIH0sXG4gKiAgIChlcnIpID0+IHtcbiAqICAgICBjb25zb2xlLmxvZyhlcnIpXG4gKiAgIH0pO1xuICpcbiAqIC8vIFNldCB0aGUgaGFuZGxlciB0byBydW4gZXZlcnkgdGltZSB3ZSB0YWtlIGEgcGljdHVyZVxuICogdGhpcy5jYW1lcmFQcmV2aWV3LnNldE9uUGljdHVyZVRha2VuSGFuZGxlcigpLnN1YnNjcmliZSgocmVzdWx0KSA9PiB7XG4gKiAgIGNvbnNvbGUubG9nKHJlc3VsdCk7XG4gKiAgIC8vIGRvIHNvbWV0aGluZyB3aXRoIHRoZSByZXN1bHRcbiAqIH0pO1xuICpcbiAqXG4gKiAvLyBwaWN0dXJlIG9wdGlvbnNcbiAqIGNvbnN0IHBpY3R1cmVPcHRzOiBDYW1lcmFQcmV2aWV3UGljdHVyZU9wdGlvbnMgPSB7XG4gKiAgIHdpZHRoOiAxMjgwLFxuICogICBoZWlnaHQ6IDEyODAsXG4gKiAgIHF1YWxpdHk6IDg1XG4gKiB9XG4gKlxuICogLy8gdGFrZSBhIHBpY3R1cmVcbiAqIHRoaXMuY2FtZXJhUHJldmlldy50YWtlUGljdHVyZSh0aGlzLnBpY3R1cmVPcHRzKS50aGVuKChpbWFnZURhdGEpID0+IHtcbiAqICAgdGhpcy5waWN0dXJlID0gJ2RhdGE6aW1hZ2UvanBlZztiYXNlNjQsJyArIGltYWdlRGF0YTtcbiAqIH0sIChlcnIpID0+IHtcbiAqICAgY29uc29sZS5sb2coZXJyKTtcbiAqICAgdGhpcy5waWN0dXJlID0gJ2Fzc2V0cy9pbWcvdGVzdC5qcGcnO1xuICogfSk7XG4gKlxuICogLy8gdGFrZSBhIHNuYXAgc2hvdFxuICogdGhpcy5jYW1lcmFQcmV2aWV3LnRha2VTbmFwc2hvdCh0aGlzLnBpY3R1cmVPcHRzKS50aGVuKChpbWFnZURhdGEpID0+IHtcbiAqICAgdGhpcy5waWN0dXJlID0gJ2RhdGE6aW1hZ2UvanBlZztiYXNlNjQsJyArIGltYWdlRGF0YTtcbiAqIH0sIChlcnIpID0+IHtcbiAqICAgY29uc29sZS5sb2coZXJyKTtcbiAqICAgdGhpcy5waWN0dXJlID0gJ2Fzc2V0cy9pbWcvdGVzdC5qcGcnO1xuICogfSk7XG4gKlxuICpcbiAqIC8vIFN3aXRjaCBjYW1lcmFcbiAqIHRoaXMuY2FtZXJhUHJldmlldy5zd2l0Y2hDYW1lcmEoKTtcbiAqXG4gKiAvLyBzZXQgY29sb3IgZWZmZWN0IHRvIG5lZ2F0aXZlXG4gKiB0aGlzLmNhbWVyYVByZXZpZXcuc2V0Q29sb3JFZmZlY3QoJ25lZ2F0aXZlJyk7XG4gKlxuICogLy8gU3RvcCB0aGUgY2FtZXJhIHByZXZpZXdcbiAqIHRoaXMuY2FtZXJhUHJldmlldy5zdG9wQ2FtZXJhKCk7XG4gKlxuICogYGBgXG4gKlxuICogQGludGVyZmFjZXNcbiAqIENhbWVyYVByZXZpZXdPcHRpb25zXG4gKiBDYW1lcmFQcmV2aWV3UGljdHVyZU9wdGlvbnNcbiAqIENhbWVyYVByZXZpZXdEaW1lbnNpb25zXG4gKi9cbkBQbHVnaW4oe1xuICBwbHVnaW5OYW1lOiAnQ2FtZXJhUHJldmlldycsXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLWNhbWVyYS1wcmV2aWV3JyxcbiAgcGx1Z2luUmVmOiAnQ2FtZXJhUHJldmlldycsXG4gIHJlcG86XG4gICAgJ2h0dHBzOi8vZ2l0aHViLmNvbS9jb3Jkb3ZhLXBsdWdpbi1jYW1lcmEtcHJldmlldy9jb3Jkb3ZhLXBsdWdpbi1jYW1lcmEtcHJldmlldycsXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddXG59KVxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIENhbWVyYVByZXZpZXcgZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XG4gIEZPQ1VTX01PREUgPSB7XG4gICAgRklYRUQ6ICdmaXhlZCcsXG4gICAgQVVUTzogJ2F1dG8nLFxuICAgIENPTlRJTlVPVVM6ICdjb250aW51b3VzJywgLy8gSU9TIE9ubHlcbiAgICBDT05USU5VT1VTX1BJQ1RVUkU6ICdjb250aW51b3VzLXBpY3R1cmUnLCAvLyBBbmRyb2lkIE9ubHlcbiAgICBDT05USU5VT1VTX1ZJREVPOiAnY29udGludW91cy12aWRlbycsIC8vIEFuZHJvaWQgT25seVxuICAgIEVET0Y6ICdlZG9mJywgLy8gQW5kcm9pZCBPbmx5XG4gICAgSU5GSU5JVFk6ICdpbmZpbml0eScsIC8vIEFuZHJvaWQgT25seVxuICAgIE1BQ1JPOiAnbWFjcm8nIC8vIEFuZHJvaWQgT25seVxuICB9O1xuXG4gIEVYUE9TVVJFX01PREUgPSB7XG4gICAgTE9DSzogJ2xvY2snLCAvLyBJT1MgT25seVxuICAgIEFVVE86ICdhdXRvJywgLy8gSU9TIE9ubHlcbiAgICBDT05USU5VT1VTOiAnY29udGludW91cycsXG4gICAgQ1VTVE9NOiAnY3VzdG9tJ1xuICB9O1xuXG4gIEZMQVNIX01PREUgPSB7XG4gICAgT0ZGOiAnb2ZmJyxcbiAgICBPTjogJ29uJyxcbiAgICBBVVRPOiAnYXV0bycsXG4gICAgUkVEX0VZRTogJ3JlZC1leWUnLFxuICAgIFRPUkNIOiAndG9yY2gnIC8vIEFuZHJvaWQgT25seVxuICB9O1xuXG4gIENPTE9SX0VGRkVDVCA9IHtcbiAgICBBUVVBOiAnYXF1YScsIC8vIEFuZHJvaWQgT25seVxuICAgIEJMQUNLQk9BUkQ6ICdibGFja2JvYXJkJywgLy8gQW5kcm9pZCBPbmx5XG4gICAgTU9OTzogJ21vbm8nLFxuICAgIE5FR0FUSVZFOiAnbmVnYXRpdmUnLFxuICAgIE5PTkU6ICdub25lJyxcbiAgICBQT1NURVJJWkU6ICdwb3N0ZXJpemUnLFxuICAgIFNFUElBOiAnc2VwaWEnLFxuICAgIFNPTEFSSVpFOiAnc29sYXJpemUnLCAvLyBBbmRyb2lkIE9ubHlcbiAgICBXSElURUJPQVJEOiAnd2hpdGVib2FyZCcgLy8gQW5kcm9pZCBPbmx5XG4gIH07XG5cbiAgQ0FNRVJBX0RJUkVDVElPTiA9IHtcbiAgICBCQUNLOiAnYmFjaycsXG4gICAgRlJPTlQ6ICdmcm9udCdcbiAgfTtcblxuICAvKipcbiAgICogU3RhcnRzIHRoZSBjYW1lcmEgcHJldmlldyBpbnN0YW5jZS5cbiAgICogQHBhcmFtIHtDYW1lcmFQcmV2aWV3T3B0aW9uc30gb3B0aW9uc1xuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgc3VjY2Vzc0luZGV4OiAxLFxuICAgIGVycm9ySW5kZXg6IDJcbiAgfSlcbiAgc3RhcnRDYW1lcmEob3B0aW9uczogQ2FtZXJhUHJldmlld09wdGlvbnMpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdG9wcyB0aGUgY2FtZXJhIHByZXZpZXcgaW5zdGFuY2UuIChpT1MgJiBBbmRyb2lkKVxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHN0b3BDYW1lcmEoKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogU3dpdGNoIGZyb20gdGhlIHJlYXIgY2FtZXJhIGFuZCBmcm9udCBjYW1lcmEsIGlmIGF2YWlsYWJsZS5cbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBzd2l0Y2hDYW1lcmEoKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogSGlkZSB0aGUgY2FtZXJhIHByZXZpZXcgYm94LlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGhpZGUoKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogU2hvdyB0aGUgY2FtZXJhIHByZXZpZXcgYm94LlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHNob3coKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogVGFrZSB0aGUgcGljdHVyZSAoYmFzZTY0KVxuICAgKiBAcGFyYW0ge0NhbWVyYVByZXZpZXdQaWN0dXJlT3B0aW9uc30gW29wdGlvbnNdIHNpemUgYW5kIHF1YWxpdHkgb2YgdGhlIHBpY3R1cmUgdG8gdGFrZVxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgc3VjY2Vzc0luZGV4OiAxLFxuICAgIGVycm9ySW5kZXg6IDJcbiAgfSlcbiAgdGFrZVBpY3R1cmUob3B0aW9ucz86IENhbWVyYVByZXZpZXdQaWN0dXJlT3B0aW9ucyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cblxuICAvKipcbiAgICogVGFrZSBhIHNuYXBzaG90IG9mIHByZXZpZXcgd2luZG93IChzaXplIHNwZWNpZmllZCBpbiBzdGFydENhbWVyYSBvcHRpb25zKVxuICAgKiBAcGFyYW0ge0NhbWVyYVByZXZpZXdQaWN0dXJlT3B0aW9uc30gW29wdGlvbnNdIHF1YWxpdHkgb2YgdGhlIHBpY3R1cmUgdG8gdGFrZVxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgc3VjY2Vzc0luZGV4OiAxLFxuICAgIGVycm9ySW5kZXg6IDJcbiAgfSlcbiAgdGFrZVNuYXBzaG90KG9wdGlvbnM/OiBDYW1lcmFQcmV2aWV3UGljdHVyZU9wdGlvbnMpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBTZXQgY2FtZXJhIGNvbG9yIGVmZmVjdC5cbiAgICogQHN0YXRpY1xuICAgKiBAcGFyYW0ge3N0cmluZ30gZWZmZWN0IG5hbWUgOiAnbm9uZScgKGlPUyAmIEFuZHJvaWQpLCAnYXF1YScgKEFuZHJvaWQpLCAnYmxhY2tib2FyZCcgKEFuZHJvaWQpLCAnbW9ubycgKGlPUyAmIEFuZHJvaWQpLCAnbmVnYXRpdmUnIChpT1MgJiBBbmRyb2lkKSwgJ3Bvc3Rlcml6ZScgKGlPUyAmIEFuZHJvaWQpLCAnc2VwaWEnIChpT1MgJiBBbmRyb2lkKSwgJ3NvbGFyaXplJyAoQW5kcm9pZCkgb3IgJ3doaXRlYm9hcmQnIChBbmRyb2lkKVxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgc3VjY2Vzc0luZGV4OiAxLFxuICAgIGVycm9ySW5kZXg6IDJcbiAgfSlcbiAgc2V0Q29sb3JFZmZlY3QoZWZmZWN0OiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgdGhlIHpvb20gKEFuZHJvaWQpXG4gICAqIEBwYXJhbSBbem9vbV0ge251bWJlcn0gWm9vbSB2YWx1ZVxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgc3VjY2Vzc0luZGV4OiAxLFxuICAgIGVycm9ySW5kZXg6IDJcbiAgfSlcbiAgc2V0Wm9vbSh6b29tPzogbnVtYmVyKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBtYXhpbXVtIHpvb20gKEFuZHJvaWQpXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgZ2V0TWF4Wm9vbSgpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgY3VycmVudCB6b29tIChBbmRyb2lkKVxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGdldFpvb20oKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogU2V0IHRoZSBwcmV2aWV3IFNpemVcbiAgICogQHBhcmFtIHtDYW1lcmFQcmV2aWV3RGltZW5zaW9uc30gW2RpbWVuc2lvbnNdXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBzdWNjZXNzSW5kZXg6IDEsXG4gICAgZXJyb3JJbmRleDogMlxuICB9KVxuICBzZXRQcmV2aWV3U2l6ZShkaW1lbnNpb25zPzogQ2FtZXJhUHJldmlld0RpbWVuc2lvbnMpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgZm9jdXMgbW9kZVxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGdldEZvY3VzTW9kZSgpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgdGhlIGZvY3VzIG1vZGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtmb2N1c01vZGVdICdmaXhlZCcsICdhdXRvJywgJ2NvbnRpbnVvdXMtcGljdHVyZScsICdjb250aW51b3VzLXZpZGVvJyAoaU9TICYgQW5kcm9pZCksICdlZG9mJywgJ2luZmluaXR5JywgJ21hY3JvJyAoQW5kcm9pZCBPbmx5KVxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgc3VjY2Vzc0luZGV4OiAxLFxuICAgIGVycm9ySW5kZXg6IDJcbiAgfSlcbiAgc2V0Rm9jdXNNb2RlKGZvY3VzTW9kZT86IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBzdXBwb3J0ZWQgZm9jdXMgbW9kZXNcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBnZXRTdXBwb3J0ZWRGb2N1c01vZGVzKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgY3VycmVudCBmbGFzaCBtb2RlXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgZ2V0Rmxhc2hNb2RlKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgZmxhc2ggbW9kZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW2ZsYXNoTW9kZV0gJ29mZicgKGlPUyAmIEFuZHJvaWQpLCAnb24nIChpT1MgJiBBbmRyb2lkKSwgJ2F1dG8nIChpT1MgJiBBbmRyb2lkKSwgJ3RvcmNoJyAoQW5kcm9pZClcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIHN1Y2Nlc3NJbmRleDogMSxcbiAgICBlcnJvckluZGV4OiAyXG4gIH0pXG4gIHNldEZsYXNoTW9kZShmbGFzaE1vZGU/OiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgc3VwcG9ydGVkIGZsYXNoIG1vZGVzXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgZ2V0U3VwcG9ydGVkRmxhc2hNb2RlcygpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgc3VwcG9ydGVkIHBpY3R1cmUgc2l6ZXNcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBnZXRTdXBwb3J0ZWRQaWN0dXJlU2l6ZXMoKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogR2V0IGV4cG9zdXJlIG1vZGVcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBnZXRFeHBvc3VyZU1vZGUoKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogR2V0IGV4cG9zdXJlIG1vZGVzXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgZ2V0RXhwb3N1cmVNb2RlcygpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgZXhwb3N1cmUgbW9kZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW2xvY2tdXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBzdWNjZXNzSW5kZXg6IDEsXG4gICAgZXJyb3JJbmRleDogMlxuICB9KVxuICBzZXRFeHBvc3VyZU1vZGUobG9jaz86IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBleHBvc3VyZSBjb21wZW5zYXRpb24gKEFuZHJvaWQpXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgZ2V0RXhwb3N1cmVDb21wZW5zYXRpb24oKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogU2V0IGV4cG9zdXJlIGNvbXBlbnNhdGlvbiAoQW5kcm9pZClcbiAgICogQHBhcmFtIHtudW1iZXJ9IFtleHBvc3VyZUNvbXBlbnNhdGlvbl1cbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIHN1Y2Nlc3NJbmRleDogMSxcbiAgICBlcnJvckluZGV4OiAyXG4gIH0pXG4gIHNldEV4cG9zdXJlQ29tcGVuc2F0aW9uKGV4cG9zdXJlQ29tcGVuc2F0aW9uPzogbnVtYmVyKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogR2V0IGV4cG9zdXJlIGNvbXBlbnNhdGlvbiByYW5nZSAoQW5kcm9pZClcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBnZXRFeHBvc3VyZUNvbXBlbnNhdGlvblJhbmdlKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCBzcGVjaWZpYyBmb2N1cyBwb2ludC4gTm90ZSwgdGhpcyBhc3N1bWVzIHRoZSBjYW1lcmEgaXMgZnVsbC1zY3JlZW4uXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB4UG9pbnRcbiAgICogQHBhcmFtIHtudW1iZXJ9IHlQb2ludFxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHRhcFRvRm9jdXMoeFBvaW50OiBudW1iZXIsIHlQb2ludDogbnVtYmVyKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogQWRkIGEgbGlzdGVuZXIgZm9yIHRoZSBiYWNrIGV2ZW50IGZvciB0aGUgcHJldmlld1xuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IGlmIGJhY2sgYnV0dG9uIHByZXNzZWRcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgb25CYWNrQnV0dG9uKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiBpbiB1c2UgZGV2aWNlIGNhbWVyYSBmb3ZcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBnZXRIb3Jpem9udGFsRk9WKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG59XG4iXX0=